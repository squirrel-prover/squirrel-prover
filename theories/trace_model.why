(*Theory imported when timestamps are represented by integers*)
theory Trace_model

  use int.Int

  (*Type declarations*)

  type index
  type timestamp = int
  type message 

  (*Definition and specification of functions on timestamps*)

  constant  init : timestamp
  constant max_int : int

  predicate happens (t : timestamp) = t >= 1 /\ max_int>=t
  predicate (~~)  (t : timestamp) (t' : timestamp) =
    (happens t \/ happens t') -> t = t'
  predicate (<~)  (t : timestamp) (t' : timestamp) =
    happens t /\ happens t' /\ t <= t'

  axiom act_init :  init  = 1

  function pred (t : timestamp) : timestamp = if happens t then t - 1 else 0

  (*Definition and specification of various functions*)

  function xoxo message message : message 
  axiom xor_assoc : forall x y z : message.
    xoxo x (xoxo y z) = xoxo (xoxo x y) z
  axiom xor_comm : forall x y : message. xoxo x y = xoxo y x
  axiom xor_nil : forall x y : message. xoxo (xoxo x x) y = y
  predicate msg_is_true message
  constant empty : message
  function pair message message : message 
  function fst message : message 
  function snd message : message 
  function att message : message 
  function of_bool bool : message

  (*Definition and specificatoin of macros*)

  predicate macro_cond timestamp
  predicate macro_exec timestamp
  function input timestamp : message
  function frame timestamp : message 
  function output timestamp : message 

  axiom macro_cond_happens : forall t : timestamp. macro_cond t -> happens t
  axiom macro_cond_init    : macro_cond ( init )

  axiom macro_exec_def : forall t : timestamp.
    macro_exec t <-> (t =  init  \/ (macro_cond t /\ macro_exec (pred t)))

  axiom executable : forall ts t : timestamp. (macro_exec ts) -> (t <~ ts -> (macro_exec t))

  axiom input_init : forall t : timestamp. 
    ((not (happens t) )\/ t = init) -> input t = empty   
  axiom expand_input :  forall t : timestamp. 
    (happens t /\ not t = init) -> input t = att (frame (pred t))

  axiom frame_init : forall t : timestamp. 
    ((not (happens t) )\/ t = init) -> frame t = empty   
  axiom expand_frame : forall t : timestamp.
    (happens t /\ not t = init) -> frame t = (pair 
      (of_bool (macro_exec t))
      (pair (if (macro_exec t) then (output t) else (empty)) (frame (pred t))))

end
